{"version":3,"sources":["components/Header/Header.js","components/Noticia/Noticia.js","components/ListaNoticias/ListaNoticias.js","components/FormularioBusqueda/FormularioBusqueda.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","titulo","react_default","a","createElement","className","href","Noticia","noticia","urlToImage","url","title","description","source","imagen","src","alt","name","target","rel","ListaNoticias","noticias","map","components_Noticia_Noticia","key","FormularioBusqueda","state","categoria","cambiarCategoria","e","_this","setState","value","props","getNoticias","onChange","this","Component","App","_callee","response","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","concat","fetch","sent","json","console","log","articles","stop","react","components_Header_Header","components_FormularioBusqueda_FormularioBusqueda","components_ListaNoticias_ListaNoticias","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7a99d55.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Header = ({ titulo }) => (\n  <nav className=\"nav-wrapper light-blue darken-3\">\n    <a href=\"#!\" className=\"brand-logo center\">{titulo}</a>\n  </nav>\n);\n\nHeader.propTypes = {\n  titulo: PropTypes.string.isRequired\n}\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Noticia = ({ noticia }) => {\n    \n    // extraer datos\n    const { urlToImage, url, title, description, source } = noticia;\n\n    // condicionalmente cargar la imagen si esta disponible\n\n    const imagen = (urlToImage) ?  \n    <div className=\"card-image\">\n        <img src={urlToImage} alt={title}></img>\n        <span className=\"card-title\">{ source.name }</span>\n    </div>\n    : null;\n\n    return (\n        <div className=\"col s12 m6 l4\"> \n            <div className=\"card\">\n                \n                {imagen}\n\n                <div className=\"card-content\">\n                    <h3>{title}</h3>\n                    <p>{description}</p>\n                </div>\n                <div className=\"card-action\">\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"waves-effect waves-light btn\">\n                        Ver noticia completa\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nNoticia.propTypes = {\n    noticia: PropTypes.object.isRequired\n};\n\nexport default Noticia;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Noticia from \"../Noticia/Noticia\";\n\nconst ListaNoticias = ({noticias}) => (\n        <div className=\"row\">\n            {noticias.map((noticia) => (\n                <Noticia\n                    key={noticia[\"url\"]}\n                    noticia={noticia}\n                />\n            ))}\n        </div>\n    );\n\nListaNoticias.propTypes = {\n    noticias: PropTypes.array.isRequired\n};\n\nexport default ListaNoticias;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormularioBusqueda extends Component {\n\n    state = {\n        categoria : ''\n    };\n\n    cambiarCategoria = e => {\n        this.setState({\n            categoria: e.target.value\n        }, () => {\n            // pasarlo a la pagina principal\n            this.props.getNoticias(this.state.categoria);\n        }); \n    };\n\n    render() {\n        return (\n            <div className=\"buscador row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <form>\n                        <h2>Encuentra Noticias por Categor√≠a</h2>\n                        <div className=\"input-field col s12 m8 offset-m2\">\n                            <select\n                                onChange={this.cambiarCategoria}\n                            >\n                                <option value=\"general\">General</option>\n                                <option value=\"business\">Negocios</option>\n                                <option value=\"entertainment\">Entretenimiento</option>\n                                <option value=\"health\">Salud</option>\n                                <option value=\"science\">Ciencia</option>\n                                <option value=\"sports\">Deportes</option>\n                                <option value=\"technology\">Tecnologia</option>\n                            </select>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nFormularioBusqueda.propTypes = {\n    getNoticias: PropTypes.func.isRequired\n};\n\nexport default FormularioBusqueda;","import React, {Component, Fragment} from 'react';\nimport Header from \"./components/Header/Header\";\nimport ListaNoticias from \"./components/ListaNoticias/ListaNoticias\";\nimport FormularioBusqueda from \"./components/FormularioBusqueda/FormularioBusqueda\";\n\nclass App  extends Component {\n\n  state = {\n    noticias: []\n  };\n\n  componentDidMount() {\n    this.getNoticias();\n  }\n\n  getNoticias = async (categoria = 'general') => {\n    const url = `https://newsapi.org/v2/top-headlines?country=ve&category=${categoria}&apiKey=e83a6f083d0a47c8a89e72d6a14e3938`;\n\n    const response = await fetch(url);\n    const noticias = await response.json();\n\n    console.log(noticias.articles);\n\n    this.setState({\n      noticias: noticias[\"articles\"]\n    });\n  }\n\n  render() {\n    return(\n      <Fragment>\n        <Header\n          titulo='Noticias ReactJS API'\n        />\n        <div className=\"container white contenedor-noticias\">\n            <FormularioBusqueda\n              getNoticias={this.getNoticias}\n            />\n            <ListaNoticias\n              noticias={this.state.noticias}\n            />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}